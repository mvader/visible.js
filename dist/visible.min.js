var visible =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	/**
	 * Checks if an element is visible on the screen.
	 * @param {HTMLElement|Element} elem Element to check
	 * @param {boolean|undefined} partial Check if is partially visible, if not provided or false this function will only return true if all element is visible
	 * @param {boolean|undefined} hidden true if element is hidden
	 * @param {string|undefined} direction vertical, horizontal or both with any other value
	 * @return {boolean|undefined}
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = visible;

	function visible(elem, partial, hidden) {
	  var direction = arguments.length <= 3 || arguments[3] === undefined ? 'both' : arguments[3];

	  if (!elem) {
	    return undefined;
	  }

	  var windowHeight = window.innerHeight,
	      windowWidth = window.innerWidth,
	      clientSize = hidden === true ? elem.offsetWidth * elem.offsetHeight : true,
	      rect = elem.getBoundingClientRect(),
	      topVisible = rect.top >= 0 && rect.top < windowHeight,
	      bottomVisible = rect.bottom > 0 && rect.bottom <= windowHeight,
	      leftVisible = rect.left >= 0 && rect.left < windowWidth,
	      rightVisible = rect.right > 0 && rect.right <= windowWidth,
	      verticalVisible = partial ? topVisible || bottomVisible : topVisible && bottomVisible,
	      horizontalVisible = partial ? leftVisible || rightVisible : leftVisible && rightVisible;

	  switch (direction) {
	    case 'vertical':
	      return clientSize && verticalVisible;

	    case 'horizontal':
	      return clientSize && horizontalVisible;

	    default:
	      return clientSize && horizontalVisible && verticalVisible;
	  }
	}

	module.exports = exports['default'];

/***/ }
/******/ ]);